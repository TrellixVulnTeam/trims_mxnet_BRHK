// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: upr.proto

#include "upr.pb.h"
#include "upr.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace upr {

static const char* Registry_method_names[] = {
  "/upr.Registry/Info",
  "/upr.Registry/Open",
  "/upr.Registry/Close",
};

std::unique_ptr< Registry::Stub> Registry::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Registry::Stub> stub(new Registry::Stub(channel));
  return stub;
}

Registry::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Info_(Registry_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Open_(Registry_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Close_(Registry_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Registry::Stub::Info(::grpc::ClientContext* context, const ::upr::ModelRequest& request, ::upr::Model* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Info_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::upr::Model>* Registry::Stub::AsyncInfoRaw(::grpc::ClientContext* context, const ::upr::ModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::upr::Model>::Create(channel_.get(), cq, rpcmethod_Info_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::upr::Model>* Registry::Stub::PrepareAsyncInfoRaw(::grpc::ClientContext* context, const ::upr::ModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::upr::Model>::Create(channel_.get(), cq, rpcmethod_Info_, context, request, false);
}

::grpc::Status Registry::Stub::Open(::grpc::ClientContext* context, const ::upr::ModelRequest& request, ::upr::Model* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Open_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::upr::Model>* Registry::Stub::AsyncOpenRaw(::grpc::ClientContext* context, const ::upr::ModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::upr::Model>::Create(channel_.get(), cq, rpcmethod_Open_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::upr::Model>* Registry::Stub::PrepareAsyncOpenRaw(::grpc::ClientContext* context, const ::upr::ModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::upr::Model>::Create(channel_.get(), cq, rpcmethod_Open_, context, request, false);
}

::grpc::Status Registry::Stub::Close(::grpc::ClientContext* context, const ::upr::ModelRequest& request, ::upr::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Close_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::upr::Void>* Registry::Stub::AsyncCloseRaw(::grpc::ClientContext* context, const ::upr::ModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::upr::Void>::Create(channel_.get(), cq, rpcmethod_Close_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::upr::Void>* Registry::Stub::PrepareAsyncCloseRaw(::grpc::ClientContext* context, const ::upr::ModelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::upr::Void>::Create(channel_.get(), cq, rpcmethod_Close_, context, request, false);
}

Registry::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Registry_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Registry::Service, ::upr::ModelRequest, ::upr::Model>(
          std::mem_fn(&Registry::Service::Info), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Registry_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Registry::Service, ::upr::ModelRequest, ::upr::Model>(
          std::mem_fn(&Registry::Service::Open), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Registry_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Registry::Service, ::upr::ModelRequest, ::upr::Void>(
          std::mem_fn(&Registry::Service::Close), this)));
}

Registry::Service::~Service() {
}

::grpc::Status Registry::Service::Info(::grpc::ServerContext* context, const ::upr::ModelRequest* request, ::upr::Model* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Registry::Service::Open(::grpc::ServerContext* context, const ::upr::ModelRequest* request, ::upr::Model* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Registry::Service::Close(::grpc::ServerContext* context, const ::upr::ModelRequest* request, ::upr::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace upr

