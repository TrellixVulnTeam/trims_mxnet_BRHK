// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: upr.proto

#ifndef PROTOBUF_upr_2eproto__INCLUDED
#define PROTOBUF_upr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_upr_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsShapeImpl();
void InitDefaultsShape();
void InitDefaultsLayerImpl();
void InitDefaultsLayer();
void InitDefaultsModelHandleImpl();
void InitDefaultsModelHandle();
void InitDefaultsModelImpl();
void InitDefaultsModel();
void InitDefaultsModelRequestImpl();
void InitDefaultsModelRequest();
void InitDefaultsVoidImpl();
void InitDefaultsVoid();
inline void InitDefaults() {
  InitDefaultsShape();
  InitDefaultsLayer();
  InitDefaultsModelHandle();
  InitDefaultsModel();
  InitDefaultsModelRequest();
  InitDefaultsVoid();
}
}  // namespace protobuf_upr_2eproto
namespace upr {
class Layer;
class LayerDefaultTypeInternal;
extern LayerDefaultTypeInternal _Layer_default_instance_;
class Model;
class ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
class ModelHandle;
class ModelHandleDefaultTypeInternal;
extern ModelHandleDefaultTypeInternal _ModelHandle_default_instance_;
class ModelRequest;
class ModelRequestDefaultTypeInternal;
extern ModelRequestDefaultTypeInternal _ModelRequest_default_instance_;
class Shape;
class ShapeDefaultTypeInternal;
extern ShapeDefaultTypeInternal _Shape_default_instance_;
class Void;
class VoidDefaultTypeInternal;
extern VoidDefaultTypeInternal _Void_default_instance_;
}  // namespace upr
namespace upr {

// ===================================================================

class Shape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:upr.Shape) */ {
 public:
  Shape();
  virtual ~Shape();

  Shape(const Shape& from);

  inline Shape& operator=(const Shape& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Shape(Shape&& from) noexcept
    : Shape() {
    *this = ::std::move(from);
  }

  inline Shape& operator=(Shape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Shape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shape* internal_default_instance() {
    return reinterpret_cast<const Shape*>(
               &_Shape_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Shape* other);
  void Swap(Shape* other);
  friend void swap(Shape& a, Shape& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Shape* New() const PROTOBUF_FINAL { return New(NULL); }

  Shape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Shape& from);
  void MergeFrom(const Shape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Shape* other);
  protected:
  explicit Shape(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 dim = 2;
  int dim_size() const;
  void clear_dim();
  static const int kDimFieldNumber = 2;
  ::google::protobuf::int32 dim(int index) const;
  void set_dim(int index, ::google::protobuf::int32 value);
  void add_dim(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dim() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dim();

  // int32 rank = 1;
  void clear_rank();
  static const int kRankFieldNumber = 1;
  ::google::protobuf::int32 rank() const;
  void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:upr.Shape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dim_;
  mutable int _dim_cached_byte_size_;
  ::google::protobuf::int32 rank_;
  mutable int _cached_size_;
  friend struct ::protobuf_upr_2eproto::TableStruct;
  friend void ::protobuf_upr_2eproto::InitDefaultsShapeImpl();
};
// -------------------------------------------------------------------

class Layer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:upr.Layer) */ {
 public:
  Layer();
  virtual ~Layer();

  Layer(const Layer& from);

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Layer(Layer&& from) noexcept
    : Layer() {
    *this = ::std::move(from);
  }

  inline Layer& operator=(Layer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Layer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Layer* other);
  void Swap(Layer* other);
  friend void swap(Layer& a, Layer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Layer* New() const PROTOBUF_FINAL { return New(NULL); }

  Layer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Layer* other);
  protected:
  explicit Layer(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // bytes ipc_handle = 5;
  void clear_ipc_handle();
  static const int kIpcHandleFieldNumber = 5;
  const ::std::string& ipc_handle() const;
  void set_ipc_handle(const ::std::string& value);
  #if LANG_CXX11
  void set_ipc_handle(::std::string&& value);
  #endif
  void set_ipc_handle(const char* value);
  void set_ipc_handle(const void* value, size_t size);
  ::std::string* mutable_ipc_handle();
  ::std::string* release_ipc_handle();
  void set_allocated_ipc_handle(::std::string* ipc_handle);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_ipc_handle();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ipc_handle(
      ::std::string* ipc_handle);

  // .upr.Shape shape = 3;
  bool has_shape() const;
  void clear_shape();
  static const int kShapeFieldNumber = 3;
  private:
  void _slow_mutable_shape();
  public:
  const ::upr::Shape& shape() const;
  ::upr::Shape* release_shape();
  ::upr::Shape* mutable_shape();
  void set_allocated_shape(::upr::Shape* shape);
  void unsafe_arena_set_allocated_shape(
      ::upr::Shape* shape);
  ::upr::Shape* unsafe_arena_release_shape();

  // int64 byte_count = 4;
  void clear_byte_count();
  static const int kByteCountFieldNumber = 4;
  ::google::protobuf::int64 byte_count() const;
  void set_byte_count(::google::protobuf::int64 value);

  // int64 device_raw_ptr = 6;
  void clear_device_raw_ptr();
  static const int kDeviceRawPtrFieldNumber = 6;
  ::google::protobuf::int64 device_raw_ptr() const;
  void set_device_raw_ptr(::google::protobuf::int64 value);

  // int64 ref_count = 7;
  void clear_ref_count();
  static const int kRefCountFieldNumber = 7;
  ::google::protobuf::int64 ref_count() const;
  void set_ref_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:upr.Layer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr ipc_handle_;
  ::upr::Shape* shape_;
  ::google::protobuf::int64 byte_count_;
  ::google::protobuf::int64 device_raw_ptr_;
  ::google::protobuf::int64 ref_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_upr_2eproto::TableStruct;
  friend void ::protobuf_upr_2eproto::InitDefaultsLayerImpl();
};
// -------------------------------------------------------------------

class ModelHandle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:upr.ModelHandle) */ {
 public:
  ModelHandle();
  virtual ~ModelHandle();

  ModelHandle(const ModelHandle& from);

  inline ModelHandle& operator=(const ModelHandle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModelHandle(ModelHandle&& from) noexcept
    : ModelHandle() {
    *this = ::std::move(from);
  }

  inline ModelHandle& operator=(ModelHandle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelHandle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelHandle* internal_default_instance() {
    return reinterpret_cast<const ModelHandle*>(
               &_ModelHandle_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(ModelHandle* other);
  void Swap(ModelHandle* other);
  friend void swap(ModelHandle& a, ModelHandle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModelHandle* New() const PROTOBUF_FINAL { return New(NULL); }

  ModelHandle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModelHandle& from);
  void MergeFrom(const ModelHandle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModelHandle* other);
  protected:
  explicit ModelHandle(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .upr.Layer layer = 4;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 4;
  const ::upr::Layer& layer(int index) const;
  ::upr::Layer* mutable_layer(int index);
  ::upr::Layer* add_layer();
  ::google::protobuf::RepeatedPtrField< ::upr::Layer >*
      mutable_layer();
  const ::google::protobuf::RepeatedPtrField< ::upr::Layer >&
      layer() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // string model_id = 2;
  void clear_model_id();
  static const int kModelIdFieldNumber = 2;
  const ::std::string& model_id() const;
  void set_model_id(const ::std::string& value);
  #if LANG_CXX11
  void set_model_id(::std::string&& value);
  #endif
  void set_model_id(const char* value);
  void set_model_id(const char* value, size_t size);
  ::std::string* mutable_model_id();
  ::std::string* release_model_id();
  void set_allocated_model_id(::std::string* model_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_model_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_model_id(
      ::std::string* model_id);

  // int64 byte_count = 3;
  void clear_byte_count();
  static const int kByteCountFieldNumber = 3;
  ::google::protobuf::int64 byte_count() const;
  void set_byte_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:upr.ModelHandle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::upr::Layer > layer_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr model_id_;
  ::google::protobuf::int64 byte_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_upr_2eproto::TableStruct;
  friend void ::protobuf_upr_2eproto::InitDefaultsModelHandleImpl();
};
// -------------------------------------------------------------------

class Model : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:upr.Model) */ {
 public:
  Model();
  virtual ~Model();

  Model(const Model& from);

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Model(Model&& from) noexcept
    : Model() {
    *this = ::std::move(from);
  }

  inline Model& operator=(Model&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Model& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(Model* other);
  void Swap(Model* other);
  friend void swap(Model& a, Model& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Model* New() const PROTOBUF_FINAL { return New(NULL); }

  Model* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Model* other);
  protected:
  explicit Model(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .upr.ModelHandle shared_model = 6;
  int shared_model_size() const;
  void clear_shared_model();
  static const int kSharedModelFieldNumber = 6;
  const ::upr::ModelHandle& shared_model(int index) const;
  ::upr::ModelHandle* mutable_shared_model(int index);
  ::upr::ModelHandle* add_shared_model();
  ::google::protobuf::RepeatedPtrField< ::upr::ModelHandle >*
      mutable_shared_model();
  const ::google::protobuf::RepeatedPtrField< ::upr::ModelHandle >&
      shared_model() const;

  // repeated .google.protobuf.Timestamp use_history = 9;
  int use_history_size() const;
  void clear_use_history();
  static const int kUseHistoryFieldNumber = 9;
  const ::google::protobuf::Timestamp& use_history(int index) const;
  ::google::protobuf::Timestamp* mutable_use_history(int index);
  ::google::protobuf::Timestamp* add_use_history();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >*
      mutable_use_history();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >&
      use_history() const;

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      ::std::string* id);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string file_path = 3;
  void clear_file_path();
  static const int kFilePathFieldNumber = 3;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_file_path(::std::string&& value);
  #endif
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_file_path();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_file_path(
      ::std::string* file_path);

  // .upr.ModelHandle owned_model = 5;
  bool has_owned_model() const;
  void clear_owned_model();
  static const int kOwnedModelFieldNumber = 5;
  private:
  void _slow_mutable_owned_model();
  public:
  const ::upr::ModelHandle& owned_model() const;
  ::upr::ModelHandle* release_owned_model();
  ::upr::ModelHandle* mutable_owned_model();
  void set_allocated_owned_model(::upr::ModelHandle* owned_model);
  void unsafe_arena_set_allocated_owned_model(
      ::upr::ModelHandle* owned_model);
  ::upr::ModelHandle* unsafe_arena_release_owned_model();

  // .google.protobuf.Timestamp lru_timestamp = 7;
  bool has_lru_timestamp() const;
  void clear_lru_timestamp();
  static const int kLruTimestampFieldNumber = 7;
  private:
  void _slow_mutable_lru_timestamp();
  public:
  const ::google::protobuf::Timestamp& lru_timestamp() const;
  ::google::protobuf::Timestamp* release_lru_timestamp();
  ::google::protobuf::Timestamp* mutable_lru_timestamp();
  void set_allocated_lru_timestamp(::google::protobuf::Timestamp* lru_timestamp);
  void unsafe_arena_set_allocated_lru_timestamp(
      ::google::protobuf::Timestamp* lru_timestamp);
  ::google::protobuf::Timestamp* unsafe_arena_release_lru_timestamp();

  // int64 ref_count = 4;
  void clear_ref_count();
  static const int kRefCountFieldNumber = 4;
  ::google::protobuf::int64 ref_count() const;
  void set_ref_count(::google::protobuf::int64 value);

  // int64 fifo_order = 8;
  void clear_fifo_order();
  static const int kFifoOrderFieldNumber = 8;
  ::google::protobuf::int64 fifo_order() const;
  void set_fifo_order(::google::protobuf::int64 value);

  // bool always_resident = 10;
  void clear_always_resident();
  static const int kAlwaysResidentFieldNumber = 10;
  bool always_resident() const;
  void set_always_resident(bool value);

  // @@protoc_insertion_point(class_scope:upr.Model)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::upr::ModelHandle > shared_model_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp > use_history_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  ::upr::ModelHandle* owned_model_;
  ::google::protobuf::Timestamp* lru_timestamp_;
  ::google::protobuf::int64 ref_count_;
  ::google::protobuf::int64 fifo_order_;
  bool always_resident_;
  mutable int _cached_size_;
  friend struct ::protobuf_upr_2eproto::TableStruct;
  friend void ::protobuf_upr_2eproto::InitDefaultsModelImpl();
};
// -------------------------------------------------------------------

class ModelRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:upr.ModelRequest) */ {
 public:
  ModelRequest();
  virtual ~ModelRequest();

  ModelRequest(const ModelRequest& from);

  inline ModelRequest& operator=(const ModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModelRequest(ModelRequest&& from) noexcept
    : ModelRequest() {
    *this = ::std::move(from);
  }

  inline ModelRequest& operator=(ModelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModelRequest* internal_default_instance() {
    return reinterpret_cast<const ModelRequest*>(
               &_ModelRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(ModelRequest* other);
  void Swap(ModelRequest* other);
  friend void swap(ModelRequest& a, ModelRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModelRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ModelRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModelRequest& from);
  void MergeFrom(const ModelRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModelRequest* other);
  protected:
  explicit ModelRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string directory_path = 2;
  void clear_directory_path();
  static const int kDirectoryPathFieldNumber = 2;
  const ::std::string& directory_path() const;
  void set_directory_path(const ::std::string& value);
  #if LANG_CXX11
  void set_directory_path(::std::string&& value);
  #endif
  void set_directory_path(const char* value);
  void set_directory_path(const char* value, size_t size);
  ::std::string* mutable_directory_path();
  ::std::string* release_directory_path();
  void set_allocated_directory_path(::std::string* directory_path);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_directory_path();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_directory_path(
      ::std::string* directory_path);

  // bool no_cache = 3;
  void clear_no_cache();
  static const int kNoCacheFieldNumber = 3;
  bool no_cache() const;
  void set_no_cache(bool value);

  // @@protoc_insertion_point(class_scope:upr.ModelRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr directory_path_;
  bool no_cache_;
  mutable int _cached_size_;
  friend struct ::protobuf_upr_2eproto::TableStruct;
  friend void ::protobuf_upr_2eproto::InitDefaultsModelRequestImpl();
};
// -------------------------------------------------------------------

class Void : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:upr.Void) */ {
 public:
  Void();
  virtual ~Void();

  Void(const Void& from);

  inline Void& operator=(const Void& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Void(Void&& from) noexcept
    : Void() {
    *this = ::std::move(from);
  }

  inline Void& operator=(Void&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Void& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Void* internal_default_instance() {
    return reinterpret_cast<const Void*>(
               &_Void_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(Void* other);
  void Swap(Void* other);
  friend void swap(Void& a, Void& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Void* New() const PROTOBUF_FINAL { return New(NULL); }

  Void* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Void& from);
  void MergeFrom(const Void& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Void* other);
  protected:
  explicit Void(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:upr.Void)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable int _cached_size_;
  friend struct ::protobuf_upr_2eproto::TableStruct;
  friend void ::protobuf_upr_2eproto::InitDefaultsVoidImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Shape

// int32 rank = 1;
inline void Shape::clear_rank() {
  rank_ = 0;
}
inline ::google::protobuf::int32 Shape::rank() const {
  // @@protoc_insertion_point(field_get:upr.Shape.rank)
  return rank_;
}
inline void Shape::set_rank(::google::protobuf::int32 value) {
  
  rank_ = value;
  // @@protoc_insertion_point(field_set:upr.Shape.rank)
}

// repeated int32 dim = 2;
inline int Shape::dim_size() const {
  return dim_.size();
}
inline void Shape::clear_dim() {
  dim_.Clear();
}
inline ::google::protobuf::int32 Shape::dim(int index) const {
  // @@protoc_insertion_point(field_get:upr.Shape.dim)
  return dim_.Get(index);
}
inline void Shape::set_dim(int index, ::google::protobuf::int32 value) {
  dim_.Set(index, value);
  // @@protoc_insertion_point(field_set:upr.Shape.dim)
}
inline void Shape::add_dim(::google::protobuf::int32 value) {
  dim_.Add(value);
  // @@protoc_insertion_point(field_add:upr.Shape.dim)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Shape::dim() const {
  // @@protoc_insertion_point(field_list:upr.Shape.dim)
  return dim_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Shape::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:upr.Shape.dim)
  return &dim_;
}

// -------------------------------------------------------------------

// Layer

// string id = 1;
inline void Layer::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Layer::id() const {
  // @@protoc_insertion_point(field_get:upr.Layer.id)
  return id_.Get();
}
inline void Layer::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:upr.Layer.id)
}
#if LANG_CXX11
inline void Layer::set_id(::std::string&& value) {
  
  id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:upr.Layer.id)
}
#endif
inline void Layer::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:upr.Layer.id)
}
inline void Layer::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:upr.Layer.id)
}
inline ::std::string* Layer::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:upr.Layer.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Layer::release_id() {
  // @@protoc_insertion_point(field_release:upr.Layer.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Layer::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:upr.Layer.id)
}
inline ::std::string* Layer::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upr.Layer.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Layer::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upr.Layer.id)
}

// string name = 2;
inline void Layer::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Layer::name() const {
  // @@protoc_insertion_point(field_get:upr.Layer.name)
  return name_.Get();
}
inline void Layer::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:upr.Layer.name)
}
#if LANG_CXX11
inline void Layer::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:upr.Layer.name)
}
#endif
inline void Layer::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:upr.Layer.name)
}
inline void Layer::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:upr.Layer.name)
}
inline ::std::string* Layer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:upr.Layer.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Layer::release_name() {
  // @@protoc_insertion_point(field_release:upr.Layer.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Layer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:upr.Layer.name)
}
inline ::std::string* Layer::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upr.Layer.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Layer::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upr.Layer.name)
}

// .upr.Shape shape = 3;
inline bool Layer::has_shape() const {
  return this != internal_default_instance() && shape_ != NULL;
}
inline void Layer::clear_shape() {
  if (GetArenaNoVirtual() == NULL && shape_ != NULL) {
    delete shape_;
  }
  shape_ = NULL;
}
inline const ::upr::Shape& Layer::shape() const {
  const ::upr::Shape* p = shape_;
  // @@protoc_insertion_point(field_get:upr.Layer.shape)
  return p != NULL ? *p : *reinterpret_cast<const ::upr::Shape*>(
      &::upr::_Shape_default_instance_);
}
inline ::upr::Shape* Layer::release_shape() {
  // @@protoc_insertion_point(field_release:upr.Layer.shape)
  
  ::upr::Shape* temp = shape_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  shape_ = NULL;
  return temp;
}
inline ::upr::Shape* Layer::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upr.Layer.shape)
  
  ::upr::Shape* temp = shape_;
  shape_ = NULL;
  return temp;
}
inline ::upr::Shape* Layer::mutable_shape() {
  
  if (shape_ == NULL) {
    _slow_mutable_shape();
  }
  // @@protoc_insertion_point(field_mutable:upr.Layer.shape)
  return shape_;
}
inline void Layer::set_allocated_shape(::upr::Shape* shape) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete shape_;
  }
  if (shape) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:upr.Layer.shape)
}

// int64 byte_count = 4;
inline void Layer::clear_byte_count() {
  byte_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Layer::byte_count() const {
  // @@protoc_insertion_point(field_get:upr.Layer.byte_count)
  return byte_count_;
}
inline void Layer::set_byte_count(::google::protobuf::int64 value) {
  
  byte_count_ = value;
  // @@protoc_insertion_point(field_set:upr.Layer.byte_count)
}

// bytes ipc_handle = 5;
inline void Layer::clear_ipc_handle() {
  ipc_handle_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Layer::ipc_handle() const {
  // @@protoc_insertion_point(field_get:upr.Layer.ipc_handle)
  return ipc_handle_.Get();
}
inline void Layer::set_ipc_handle(const ::std::string& value) {
  
  ipc_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:upr.Layer.ipc_handle)
}
#if LANG_CXX11
inline void Layer::set_ipc_handle(::std::string&& value) {
  
  ipc_handle_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:upr.Layer.ipc_handle)
}
#endif
inline void Layer::set_ipc_handle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ipc_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:upr.Layer.ipc_handle)
}
inline void Layer::set_ipc_handle(const void* value,
    size_t size) {
  
  ipc_handle_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:upr.Layer.ipc_handle)
}
inline ::std::string* Layer::mutable_ipc_handle() {
  
  // @@protoc_insertion_point(field_mutable:upr.Layer.ipc_handle)
  return ipc_handle_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Layer::release_ipc_handle() {
  // @@protoc_insertion_point(field_release:upr.Layer.ipc_handle)
  
  return ipc_handle_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Layer::set_allocated_ipc_handle(::std::string* ipc_handle) {
  if (ipc_handle != NULL) {
    
  } else {
    
  }
  ipc_handle_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ipc_handle,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:upr.Layer.ipc_handle)
}
inline ::std::string* Layer::unsafe_arena_release_ipc_handle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upr.Layer.ipc_handle)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ipc_handle_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Layer::unsafe_arena_set_allocated_ipc_handle(
    ::std::string* ipc_handle) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ipc_handle != NULL) {
    
  } else {
    
  }
  ipc_handle_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ipc_handle, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upr.Layer.ipc_handle)
}

// int64 device_raw_ptr = 6;
inline void Layer::clear_device_raw_ptr() {
  device_raw_ptr_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Layer::device_raw_ptr() const {
  // @@protoc_insertion_point(field_get:upr.Layer.device_raw_ptr)
  return device_raw_ptr_;
}
inline void Layer::set_device_raw_ptr(::google::protobuf::int64 value) {
  
  device_raw_ptr_ = value;
  // @@protoc_insertion_point(field_set:upr.Layer.device_raw_ptr)
}

// int64 ref_count = 7;
inline void Layer::clear_ref_count() {
  ref_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Layer::ref_count() const {
  // @@protoc_insertion_point(field_get:upr.Layer.ref_count)
  return ref_count_;
}
inline void Layer::set_ref_count(::google::protobuf::int64 value) {
  
  ref_count_ = value;
  // @@protoc_insertion_point(field_set:upr.Layer.ref_count)
}

// -------------------------------------------------------------------

// ModelHandle

// string id = 1;
inline void ModelHandle::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ModelHandle::id() const {
  // @@protoc_insertion_point(field_get:upr.ModelHandle.id)
  return id_.Get();
}
inline void ModelHandle::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:upr.ModelHandle.id)
}
#if LANG_CXX11
inline void ModelHandle::set_id(::std::string&& value) {
  
  id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:upr.ModelHandle.id)
}
#endif
inline void ModelHandle::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:upr.ModelHandle.id)
}
inline void ModelHandle::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:upr.ModelHandle.id)
}
inline ::std::string* ModelHandle::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:upr.ModelHandle.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ModelHandle::release_id() {
  // @@protoc_insertion_point(field_release:upr.ModelHandle.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ModelHandle::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:upr.ModelHandle.id)
}
inline ::std::string* ModelHandle::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upr.ModelHandle.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ModelHandle::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upr.ModelHandle.id)
}

// string model_id = 2;
inline void ModelHandle::clear_model_id() {
  model_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ModelHandle::model_id() const {
  // @@protoc_insertion_point(field_get:upr.ModelHandle.model_id)
  return model_id_.Get();
}
inline void ModelHandle::set_model_id(const ::std::string& value) {
  
  model_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:upr.ModelHandle.model_id)
}
#if LANG_CXX11
inline void ModelHandle::set_model_id(::std::string&& value) {
  
  model_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:upr.ModelHandle.model_id)
}
#endif
inline void ModelHandle::set_model_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  model_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:upr.ModelHandle.model_id)
}
inline void ModelHandle::set_model_id(const char* value,
    size_t size) {
  
  model_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:upr.ModelHandle.model_id)
}
inline ::std::string* ModelHandle::mutable_model_id() {
  
  // @@protoc_insertion_point(field_mutable:upr.ModelHandle.model_id)
  return model_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ModelHandle::release_model_id() {
  // @@protoc_insertion_point(field_release:upr.ModelHandle.model_id)
  
  return model_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ModelHandle::set_allocated_model_id(::std::string* model_id) {
  if (model_id != NULL) {
    
  } else {
    
  }
  model_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:upr.ModelHandle.model_id)
}
inline ::std::string* ModelHandle::unsafe_arena_release_model_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upr.ModelHandle.model_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return model_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ModelHandle::unsafe_arena_set_allocated_model_id(
    ::std::string* model_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (model_id != NULL) {
    
  } else {
    
  }
  model_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      model_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upr.ModelHandle.model_id)
}

// int64 byte_count = 3;
inline void ModelHandle::clear_byte_count() {
  byte_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ModelHandle::byte_count() const {
  // @@protoc_insertion_point(field_get:upr.ModelHandle.byte_count)
  return byte_count_;
}
inline void ModelHandle::set_byte_count(::google::protobuf::int64 value) {
  
  byte_count_ = value;
  // @@protoc_insertion_point(field_set:upr.ModelHandle.byte_count)
}

// repeated .upr.Layer layer = 4;
inline int ModelHandle::layer_size() const {
  return layer_.size();
}
inline void ModelHandle::clear_layer() {
  layer_.Clear();
}
inline const ::upr::Layer& ModelHandle::layer(int index) const {
  // @@protoc_insertion_point(field_get:upr.ModelHandle.layer)
  return layer_.Get(index);
}
inline ::upr::Layer* ModelHandle::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:upr.ModelHandle.layer)
  return layer_.Mutable(index);
}
inline ::upr::Layer* ModelHandle::add_layer() {
  // @@protoc_insertion_point(field_add:upr.ModelHandle.layer)
  return layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::upr::Layer >*
ModelHandle::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:upr.ModelHandle.layer)
  return &layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::upr::Layer >&
ModelHandle::layer() const {
  // @@protoc_insertion_point(field_list:upr.ModelHandle.layer)
  return layer_;
}

// -------------------------------------------------------------------

// Model

// string id = 1;
inline void Model::clear_id() {
  id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Model::id() const {
  // @@protoc_insertion_point(field_get:upr.Model.id)
  return id_.Get();
}
inline void Model::set_id(const ::std::string& value) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:upr.Model.id)
}
#if LANG_CXX11
inline void Model::set_id(::std::string&& value) {
  
  id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:upr.Model.id)
}
#endif
inline void Model::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:upr.Model.id)
}
inline void Model::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:upr.Model.id)
}
inline ::std::string* Model::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:upr.Model.id)
  return id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Model::release_id() {
  // @@protoc_insertion_point(field_release:upr.Model.id)
  
  return id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Model::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:upr.Model.id)
}
inline ::std::string* Model::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upr.Model.id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Model::unsafe_arena_set_allocated_id(
    ::std::string* id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (id != NULL) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upr.Model.id)
}

// string name = 2;
inline void Model::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Model::name() const {
  // @@protoc_insertion_point(field_get:upr.Model.name)
  return name_.Get();
}
inline void Model::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:upr.Model.name)
}
#if LANG_CXX11
inline void Model::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:upr.Model.name)
}
#endif
inline void Model::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:upr.Model.name)
}
inline void Model::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:upr.Model.name)
}
inline ::std::string* Model::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:upr.Model.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Model::release_name() {
  // @@protoc_insertion_point(field_release:upr.Model.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Model::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:upr.Model.name)
}
inline ::std::string* Model::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upr.Model.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Model::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upr.Model.name)
}

// string file_path = 3;
inline void Model::clear_file_path() {
  file_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Model::file_path() const {
  // @@protoc_insertion_point(field_get:upr.Model.file_path)
  return file_path_.Get();
}
inline void Model::set_file_path(const ::std::string& value) {
  
  file_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:upr.Model.file_path)
}
#if LANG_CXX11
inline void Model::set_file_path(::std::string&& value) {
  
  file_path_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:upr.Model.file_path)
}
#endif
inline void Model::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:upr.Model.file_path)
}
inline void Model::set_file_path(const char* value,
    size_t size) {
  
  file_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:upr.Model.file_path)
}
inline ::std::string* Model::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:upr.Model.file_path)
  return file_path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Model::release_file_path() {
  // @@protoc_insertion_point(field_release:upr.Model.file_path)
  
  return file_path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Model::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:upr.Model.file_path)
}
inline ::std::string* Model::unsafe_arena_release_file_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upr.Model.file_path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return file_path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Model::unsafe_arena_set_allocated_file_path(
    ::std::string* file_path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      file_path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upr.Model.file_path)
}

// int64 ref_count = 4;
inline void Model::clear_ref_count() {
  ref_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Model::ref_count() const {
  // @@protoc_insertion_point(field_get:upr.Model.ref_count)
  return ref_count_;
}
inline void Model::set_ref_count(::google::protobuf::int64 value) {
  
  ref_count_ = value;
  // @@protoc_insertion_point(field_set:upr.Model.ref_count)
}

// .upr.ModelHandle owned_model = 5;
inline bool Model::has_owned_model() const {
  return this != internal_default_instance() && owned_model_ != NULL;
}
inline void Model::clear_owned_model() {
  if (GetArenaNoVirtual() == NULL && owned_model_ != NULL) {
    delete owned_model_;
  }
  owned_model_ = NULL;
}
inline const ::upr::ModelHandle& Model::owned_model() const {
  const ::upr::ModelHandle* p = owned_model_;
  // @@protoc_insertion_point(field_get:upr.Model.owned_model)
  return p != NULL ? *p : *reinterpret_cast<const ::upr::ModelHandle*>(
      &::upr::_ModelHandle_default_instance_);
}
inline ::upr::ModelHandle* Model::release_owned_model() {
  // @@protoc_insertion_point(field_release:upr.Model.owned_model)
  
  ::upr::ModelHandle* temp = owned_model_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  owned_model_ = NULL;
  return temp;
}
inline ::upr::ModelHandle* Model::unsafe_arena_release_owned_model() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upr.Model.owned_model)
  
  ::upr::ModelHandle* temp = owned_model_;
  owned_model_ = NULL;
  return temp;
}
inline ::upr::ModelHandle* Model::mutable_owned_model() {
  
  if (owned_model_ == NULL) {
    _slow_mutable_owned_model();
  }
  // @@protoc_insertion_point(field_mutable:upr.Model.owned_model)
  return owned_model_;
}
inline void Model::set_allocated_owned_model(::upr::ModelHandle* owned_model) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete owned_model_;
  }
  if (owned_model) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(owned_model);
    if (message_arena != submessage_arena) {
      owned_model = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, owned_model, submessage_arena);
    }
    
  } else {
    
  }
  owned_model_ = owned_model;
  // @@protoc_insertion_point(field_set_allocated:upr.Model.owned_model)
}

// repeated .upr.ModelHandle shared_model = 6;
inline int Model::shared_model_size() const {
  return shared_model_.size();
}
inline void Model::clear_shared_model() {
  shared_model_.Clear();
}
inline const ::upr::ModelHandle& Model::shared_model(int index) const {
  // @@protoc_insertion_point(field_get:upr.Model.shared_model)
  return shared_model_.Get(index);
}
inline ::upr::ModelHandle* Model::mutable_shared_model(int index) {
  // @@protoc_insertion_point(field_mutable:upr.Model.shared_model)
  return shared_model_.Mutable(index);
}
inline ::upr::ModelHandle* Model::add_shared_model() {
  // @@protoc_insertion_point(field_add:upr.Model.shared_model)
  return shared_model_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::upr::ModelHandle >*
Model::mutable_shared_model() {
  // @@protoc_insertion_point(field_mutable_list:upr.Model.shared_model)
  return &shared_model_;
}
inline const ::google::protobuf::RepeatedPtrField< ::upr::ModelHandle >&
Model::shared_model() const {
  // @@protoc_insertion_point(field_list:upr.Model.shared_model)
  return shared_model_;
}

// .google.protobuf.Timestamp lru_timestamp = 7;
inline bool Model::has_lru_timestamp() const {
  return this != internal_default_instance() && lru_timestamp_ != NULL;
}
inline const ::google::protobuf::Timestamp& Model::lru_timestamp() const {
  const ::google::protobuf::Timestamp* p = lru_timestamp_;
  // @@protoc_insertion_point(field_get:upr.Model.lru_timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Model::release_lru_timestamp() {
  // @@protoc_insertion_point(field_release:upr.Model.lru_timestamp)
  
  ::google::protobuf::Timestamp* temp = lru_timestamp_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  lru_timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Model::unsafe_arena_release_lru_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upr.Model.lru_timestamp)
  
  ::google::protobuf::Timestamp* temp = lru_timestamp_;
  lru_timestamp_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Model::mutable_lru_timestamp() {
  
  if (lru_timestamp_ == NULL) {
    _slow_mutable_lru_timestamp();
  }
  // @@protoc_insertion_point(field_mutable:upr.Model.lru_timestamp)
  return lru_timestamp_;
}
inline void Model::set_allocated_lru_timestamp(::google::protobuf::Timestamp* lru_timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lru_timestamp_);
  }
  if (lru_timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(lru_timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      lru_timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lru_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  lru_timestamp_ = lru_timestamp;
  // @@protoc_insertion_point(field_set_allocated:upr.Model.lru_timestamp)
}

// int64 fifo_order = 8;
inline void Model::clear_fifo_order() {
  fifo_order_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Model::fifo_order() const {
  // @@protoc_insertion_point(field_get:upr.Model.fifo_order)
  return fifo_order_;
}
inline void Model::set_fifo_order(::google::protobuf::int64 value) {
  
  fifo_order_ = value;
  // @@protoc_insertion_point(field_set:upr.Model.fifo_order)
}

// repeated .google.protobuf.Timestamp use_history = 9;
inline int Model::use_history_size() const {
  return use_history_.size();
}
inline const ::google::protobuf::Timestamp& Model::use_history(int index) const {
  // @@protoc_insertion_point(field_get:upr.Model.use_history)
  return use_history_.Get(index);
}
inline ::google::protobuf::Timestamp* Model::mutable_use_history(int index) {
  // @@protoc_insertion_point(field_mutable:upr.Model.use_history)
  return use_history_.Mutable(index);
}
inline ::google::protobuf::Timestamp* Model::add_use_history() {
  // @@protoc_insertion_point(field_add:upr.Model.use_history)
  return use_history_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >*
Model::mutable_use_history() {
  // @@protoc_insertion_point(field_mutable_list:upr.Model.use_history)
  return &use_history_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >&
Model::use_history() const {
  // @@protoc_insertion_point(field_list:upr.Model.use_history)
  return use_history_;
}

// bool always_resident = 10;
inline void Model::clear_always_resident() {
  always_resident_ = false;
}
inline bool Model::always_resident() const {
  // @@protoc_insertion_point(field_get:upr.Model.always_resident)
  return always_resident_;
}
inline void Model::set_always_resident(bool value) {
  
  always_resident_ = value;
  // @@protoc_insertion_point(field_set:upr.Model.always_resident)
}

// -------------------------------------------------------------------

// ModelRequest

// string name = 1;
inline void ModelRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ModelRequest::name() const {
  // @@protoc_insertion_point(field_get:upr.ModelRequest.name)
  return name_.Get();
}
inline void ModelRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:upr.ModelRequest.name)
}
#if LANG_CXX11
inline void ModelRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:upr.ModelRequest.name)
}
#endif
inline void ModelRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:upr.ModelRequest.name)
}
inline void ModelRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:upr.ModelRequest.name)
}
inline ::std::string* ModelRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:upr.ModelRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ModelRequest::release_name() {
  // @@protoc_insertion_point(field_release:upr.ModelRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ModelRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:upr.ModelRequest.name)
}
inline ::std::string* ModelRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upr.ModelRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ModelRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upr.ModelRequest.name)
}

// string directory_path = 2;
inline void ModelRequest::clear_directory_path() {
  directory_path_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ModelRequest::directory_path() const {
  // @@protoc_insertion_point(field_get:upr.ModelRequest.directory_path)
  return directory_path_.Get();
}
inline void ModelRequest::set_directory_path(const ::std::string& value) {
  
  directory_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:upr.ModelRequest.directory_path)
}
#if LANG_CXX11
inline void ModelRequest::set_directory_path(::std::string&& value) {
  
  directory_path_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:upr.ModelRequest.directory_path)
}
#endif
inline void ModelRequest::set_directory_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  directory_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:upr.ModelRequest.directory_path)
}
inline void ModelRequest::set_directory_path(const char* value,
    size_t size) {
  
  directory_path_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:upr.ModelRequest.directory_path)
}
inline ::std::string* ModelRequest::mutable_directory_path() {
  
  // @@protoc_insertion_point(field_mutable:upr.ModelRequest.directory_path)
  return directory_path_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ModelRequest::release_directory_path() {
  // @@protoc_insertion_point(field_release:upr.ModelRequest.directory_path)
  
  return directory_path_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ModelRequest::set_allocated_directory_path(::std::string* directory_path) {
  if (directory_path != NULL) {
    
  } else {
    
  }
  directory_path_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), directory_path,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:upr.ModelRequest.directory_path)
}
inline ::std::string* ModelRequest::unsafe_arena_release_directory_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:upr.ModelRequest.directory_path)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return directory_path_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ModelRequest::unsafe_arena_set_allocated_directory_path(
    ::std::string* directory_path) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (directory_path != NULL) {
    
  } else {
    
  }
  directory_path_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      directory_path, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:upr.ModelRequest.directory_path)
}

// bool no_cache = 3;
inline void ModelRequest::clear_no_cache() {
  no_cache_ = false;
}
inline bool ModelRequest::no_cache() const {
  // @@protoc_insertion_point(field_get:upr.ModelRequest.no_cache)
  return no_cache_;
}
inline void ModelRequest::set_no_cache(bool value) {
  
  no_cache_ = value;
  // @@protoc_insertion_point(field_set:upr.ModelRequest.no_cache)
}

// -------------------------------------------------------------------

// Void

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace upr

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_upr_2eproto__INCLUDED
