syntax = "proto3";

import "google/protobuf/timestamp.proto";

package upr;

option go_package = "upr";

option cc_enable_arenas = true;


enum SharingGranularity {
  SharingGranularity_Slab = 0;
  SharingGranularity_Layer = 1;
  SharingGranularity_Model = 2;
}

message Shape {
  // rank of the the dims (i.e. the length of the dims)
  int32 rank = 1;
  // size in each dimension
  repeated int32 dim = 2;
}

message Layer {
  // a unique id
  string id = 1;
  // name of the layer
  string name = 2;
  // tensor shape
  Shape shape = 3;
  // byte count for the layer
  int64 byte_count = 4;
  // encoding of cuda ipc handle
  bytes ipc_handle = 5;
  // the raw cuda device ptr (as void *)
  int64 device_raw_ptr = 6;
  // the ref count for the layer (this is equal to the model ref_count)
  int64 ref_count = 7;
  // memory offset
  int64 offset = 8;
  // sharing granularity
  SharingGranularity sharing_granularity = 9;
}

// a model that's shared
// each model has a unique id
message ModelHandle {
  // a unique id
  string id = 1;
  // name mapping
  string name = 2;
  // model_id mapping
  string model_id = 3;
  // the total number of bytes for the model
  int64 byte_count = 4;
  // the sequence of layers
  repeated Layer layer = 5;
  // needed eviction
  bool needed_eviction = 6;
  // sharing granularity
  SharingGranularity sharing_granularity = 7;
  // the raw cuda device ptr (as void *)
  // used when one has model granularity
  int64 device_raw_ptr = 8;
  // encoding of cuda ipc handle
  // used when one has model granularity
  bytes ipc_handle = 9;
}

message Model {
  // a unique id
  string id = 1;
  // name of the model
  string name = 2;
  // path to the params file
  string file_path = 3;
  // the refcount for the entire model
  int64 ref_count = 4;
  // the model that's owned by the current process
  ModelHandle owned_model = 5;
  // the set of shared models
  repeated ModelHandle shared_model = 6;
  // lru tag . see (https://stackoverflow.com/questions/3574716/date-and-time-type-for-use-with-protobuf) for how to use the timestamp
  google.protobuf.Timestamp lru_timestamp = 7;
  // order (for fifo)
  int64 fifo_order = 8;
  // use history
  repeated google.protobuf.Timestamp use_history = 9;
  // whether to disable eviction of the model
  bool always_resident = 10;
}

message ModelRequest {
  // name of the model. the model is either read from
  // cache, but if does not exist (and file_path is
  // valid) then read from file
  string name = 1;
  // directory path used to read model if does not exist in registry
  // the directory is assumed to contain two files one called
  // model.params and model.symbol (model is not the model name)
  string directory_path = 2;
  // if true then the model is never read from cache
  bool no_cache = 3;
  // sharing granularity
  SharingGranularity sharing_granularity = 4;
}

message Void {}

service Registry {
  rpc Open(ModelRequest) returns (ModelHandle) {}
  rpc Close(ModelHandle) returns (Void) {}
  rpc Info(ModelRequest) returns (Model) {}
}